#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>

//个人信息数据结构
typedef struct info_t info_t;
struct info_t{
    char        name[32 + 1];
    char        phone[32 + 1];
    char        addr[256 + 1];
    struct info_t* next;
    struct info_t* pre;
}; 

//命令行显示信息
char* cmd[5]={"use [add] command to add new address entry", 
              "use [search] command to get one or more address entries", 
              "use [delete] command to remove one or more address entries",
              "use [!help] command to get help list",
              "use [!quit] command to exit program"}; 

int read_persis_file(info_t** ppinfo_list);
void display_menu();
int write_persis_file(info_t* pinfo_list);
void handle_add(info_t** ppinfo_list);
void handle_search(info_t* pinfo_list);
void handle_delete(info_t* pinfo_list);

int main()
{
    info_t*         pinfo_list = NULL;
    info_t*         pcur = NULL;
    int             ret = 0;
    char            str[64 + 1];   

    pinfo_list = (info_t*)malloc(sizeof(info_t));
    pinfo_list->next = NULL;
    pinfo_list->pre = NULL;

    //首先读取持久化文件，获取支持化存储的信息和数量 
    ret = read_persis_file(&pinfo_list);
    if(ret != 0){
        printf("read_persis_file is error![%d]\n", ret);
        goto EXIT;
    }    

    //显示菜单  
    display_menu();

    //用户输入，直到退出为止
    do
    {
        memset(str, 0, sizeof(str));
        printf("ab> ");
        scanf("%s", str);

        //判断输入命令 
        if(strcmp(str, "add") == 0){
            handle_add(&pinfo_list);
        }
        else if(strcmp(str, "search") == 0){
            handle_search(pinfo_list);
        }
        else if(strcmp(str, "delete") == 0){
            handle_delete(pinfo_list);
        }
        else if(strcmp(str, "!help") == 0){
            display_menu();
        }
        else if(strcmp(str, "!quit") == 0){
            break;
        }
        else{
            puts("Invalid Command!!!");
        }
    }while(1); 

    //最后写入持久化文件 
    ret = write_persis_file(pinfo_list);
    if(ret != 0){
        printf("write_persis_file is error![%d]\n", ret);
        goto EXIT;
    }

EXIT:

    return 0;
}

int read_persis_file(info_t** ppinfo_list)
{
    int             ret = 0;
    FILE*           fb = NULL;
    char            buf[1024 + 1];
    char*           pret = NULL;
    int             len = 0;
    char            str[1024 + 1];
    int             idx = 0;
    char*           p = NULL;
    info_t*         pinfo_tmp = NULL;

    //打开文件，读取信息
    fb = fopen((char *)"persist.dat", "r");
    if(fb == NULL){
          return 0;
    }

    while(1){
        memset(buf, 0, sizeof(buf));
        pret = fgets(buf, sizeof(buf), fb);
        if(pret == NULL){
            break;
        }
        //存储格式：id作为key，信息作为value，key和value有-分割，key自定义为数字
        //信息之间格式：名字|电话|地址 
        p = buf;
        while(*p != '-' && *p != '\n' && *p != 0){
            p++;
        }
        if(*p == '-'){
            p++;
            //开始读取信息
            //名字
            memset(str, 0, sizeof(str));
            idx = 0;
            while(*p != '|'){
                str[idx] = *p;
                idx++;
                p++;
            }
            p++;
            strcpy((*ppinfo_list)->name, str);
            //电话
            memset(str, 0, sizeof(str));
            idx = 0;
            while(*p != '|'){
                str[idx] = *p;
                idx++;
                p++;
            }
            p++;
            strcpy((*ppinfo_list)->phone, str);
            //地址 
            memset(str, 0, sizeof(str));
            idx = 0;
            while(*p != '\n' && *p != 0){
                str[idx] = *p;
                idx++;
                p++;
            }
            strcpy((*ppinfo_list)->addr, str);  

            pinfo_tmp = (*ppinfo_list); 
            (*ppinfo_list) = (*ppinfo_list)->next;
            *ppinfo_list = (info_t*)malloc(sizeof(info_t));
            (*ppinfo_list)->pre = pinfo_tmp; 
            (*ppinfo_list)->pre->next =  (*ppinfo_list);                          
        }
    }
 
    fclose(fb); 

    return 0;
}

void display_menu()
{    
    int i;
    
    puts("\t\tAddress Menu");
    
    for(i=0 ; i<sizeof(cmd)/sizeof(cmd[0]) ; ++i)
    {
        printf("%s\n", cmd[i]);
    }

    return ;
}

int write_persis_file(info_t* pinfo_list)
{
    FILE*           fb = NULL;
    int             len = 0;
    char            str[1024 + 1];
    int             key = 0;
    info_t*         pinfo = pinfo_list->pre;

    //打开文件，写入信息
    fb = fopen((char *)"persist.dat", "w");
    if(fb == NULL){
          printf("open[%s] is error[%d]\n", "persist.dat", errno);
          return -1;
    }

    while(pinfo != NULL){
        memset(str, 0, sizeof(str));
        sprintf(str, "%d-%s|%s|%s\n", key + 1,
                      pinfo->name,
                      pinfo->phone,
                      pinfo->addr);
        fputs(str, fb);
        pinfo = pinfo->pre;    
    }
 
    fclose(fb); 

    return 0;
}

void handle_add(info_t** ppinfo_list)
{
    info_t*     pinfo = NULL;
    info_t*     p = NULL;
    
    printf("name:");
    scanf("%s", (*ppinfo_list)->name);
    printf("mobile:");
    scanf("%s", (*ppinfo_list)->phone);
    printf("address:");
    scanf("%s", (*ppinfo_list)->addr);

    printf("address entry added\n");

    p = (*ppinfo_list);
    (*ppinfo_list) = (*ppinfo_list)->next;
    *ppinfo_list = (info_t*)malloc(sizeof(info_t));
    (*ppinfo_list)->pre = p;
    (*ppinfo_list)->pre->next =  (*ppinfo_list); 

    return ;
}

void handle_search(info_t* pinfo_list)
{
    char        str[256 + 1];
    info_t*     pinfo = NULL;
    char        tmp[256 + 1];

    pinfo = pinfo_list->pre;

    while(1){
        memset(str, 0, sizeof(str));
        memset(tmp, 0, sizeof(tmp));
        printf("by (name|mobile|address):");
        scanf("%s", str);
        if(strcmp(str, "name") == 0){
            printf("name:");
            scanf("%s", tmp);
            while(pinfo != NULL){
                if(strcmp(pinfo->name, tmp) == 0){
                    printf("name:%s mobile:%s address:%s\n",
                            pinfo->name, pinfo->phone, pinfo->addr);
                }
                pinfo = pinfo->pre;
            }
            break;
        }
        else if(strcmp(str, "mobile") == 0){
            printf("mobile:");
            scanf("%s", tmp);
            while(pinfo != NULL){
                if(strcmp(pinfo->phone, tmp) == 0){
                    printf("name:%s mobile:%s address:%s\n",
                            pinfo->name, pinfo->phone, pinfo->addr);
                }
                pinfo = pinfo->pre;
            }
            break;
        }
        else if(strcmp(str, "address") == 0){
            printf("address:");
            scanf("%s", tmp);
            while(pinfo != NULL){
                if(strcmp(pinfo->addr, tmp) == 0){
                    printf("name:%s mobile:%s address:%s\n",
                            pinfo->name, pinfo->phone, pinfo->addr);
                }
                pinfo = pinfo->pre;
            }
            break;
        }
        else{
            puts("Invalid Command!!!");
        }
    }
  
    return ;
}

void handle_delete(info_t* pinfo_list)
{
    char        str[256 + 1];
    info_t*     pinfo = NULL;
    char        tmp[256 + 1];
    int         cnt = 0;
    info_t*     ptmp = NULL;
   
    ptmp = pinfo_list->pre;

    while(1){
        memset(str, 0, sizeof(str));
        printf("by (name|mobile|address):");
        scanf("%s", str);
        if(strcmp(str, "name") == 0){
            printf("name:");
            scanf("%s", tmp);
A1:
            pinfo = ptmp;
            while(pinfo != NULL){
                if(strcmp(pinfo->name, tmp) == 0){
                    if(pinfo->pre != NULL){
                        pinfo->pre->next = pinfo->next;
                    }
                    pinfo->next->pre = pinfo->pre;
                    cnt++;
                }
                ptmp = ptmp->pre;
                goto A1;
            }
            break;
        }
        else if(strcmp(str, "mobile") == 0){
            printf("mobile:");
            scanf("%s", tmp);
A2:
            pinfo = ptmp;
            while(pinfo != NULL){
                if(strcmp(pinfo->phone, tmp) == 0){
                    if(pinfo->pre != NULL){
                        pinfo->pre->next = pinfo->next;
                    }
                    pinfo->next->pre = pinfo->pre;
                    cnt++;
                }
                ptmp = ptmp->pre;
                goto A2;
            }
            break;
        }
        else if(strcmp(str, "address") == 0){
            printf("address:");
            scanf("%s", tmp);
A3:
            pinfo = ptmp;
            while(pinfo != NULL){
                if(strcmp(pinfo->addr, tmp) == 0){
                    if(pinfo->pre != NULL){
                        pinfo->pre->next = pinfo->next;
                    }
                    pinfo->next->pre = pinfo->pre;
                    cnt++;
                }
                ptmp = ptmp->pre;
                goto A3;
            }
            break;
        }
        else{
            puts("Invalid Command!!!");
        }
    }

    printf(" %d address entries deleted\n", cnt);

    return ;
}
